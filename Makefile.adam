TARGET_EXEC ?= autorun.ddp

BUILD_DIR ?= ./build
SRC_DIRS ?= ./src
R2R_DIR ?= ./r2r/adam
R2R_BIN := $(R2R_DIR)/$(TARGET_EXEC)

ADDL_DIR1 := ../eoslib/src
ADDL_DIR2 := ../smartkeyslib/src

ADDL_LIB1 := eos.lib
ADDL_LIB2 := smartkeys.lib

CC=zcc
AS=zcc

SRCS := $(shell find $(SRC_DIRS) -name *.cpp -or -name *.c -or -name *_adam.asm)
OBJS := $(SRCS:%=$(BUILD_DIR)/%.o)
DEPS := $(OBJS:.o=.d)

CFLAGS=+coleco -subtype=adam -DBUILD_ADAM -I$(ADDL_DIR1) -I$(ADDL_DIR2) 
LDFLAGS=+coleco -subtype=adam -create-app -lndos -l$(ADDL_LIB1) -l$(ADDL_LIB2)
ASFLAGS=+coleco -subtype=adam

INC_DIRS := $(shell find $(SRC_DIRS) -type d)
INC_FLAGS := $(addprefix -I,$(INC_DIRS))

$(R2R_BIN): $(OBJS) | $(R2R_DIR)
	$(CC) -o$@ $(LDFLAGS) $(OBJS)

.PHONY: dist autorun clean r2r

dist: $(R2R_BIN)
	cp $< ../fujinet-platformio/data/webui/device_specific/BUILD_ADAM/

# Create the "Ready 2 Run" executable/disk
r2r: $(R2R_BIN)

# c source
$(BUILD_DIR)/%.c.o: %.c
	$(MKDIR_P) $(dir $@)
	$(CC) $(CPPFLAGS) $(CFLAGS) -c $< -o $@

# asm source
$(BUILD_DIR)/%.asm.o: %.asm
	$(MKDIR_P) $(dir $@)
	$(AS) $(ASFLAGS) -c $< -o $@

$(R2R_DIR):
	$(MKDIR_P) $@

clean:
	$(RM) -r autorun* $(BUILD_DIR) $(R2R_DIR)

-include $(DEPS)

MKDIR_P ?= mkdir -p
